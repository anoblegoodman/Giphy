{"version":3,"sources":["components/reducers/giphyReducer.js","components/reducers/likesReducer.js","components/constants/actionTypes.js","components/reducers/combinedReducers.js","components/store.js","components/action/actions.js","components/config/index.js","components/ containers/Giphs.jsx","serviceWorker.js","index.js","components/index.js"],"names":["giphyReducer","state","arguments","length","undefined","resultReceived","weirdness","error","loading","searchTerm","action","type","Object","objectSpread","totalLiked","payload","json","likesReducer","usersLikes","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","fetchGif","console","log","dispatch","getState","requestGif","fetch","concat","then","response","receiveGif","data","addLike","removeLike","removeAllLikes","updateWeirdnessScore","invalidSearch","GiphsDisconnected","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTyping","event","newSearchTerm","target","value","setState","_this$props","react_default","a","createElement","Fragment","onChange","placeholder","onClick","Component","Giphs","connect","bindActionCreators","actions","Boolean","window","location","hostname","match","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d76da9cc.chunk.js","sourcesContent":["const initialState = () => {\n  return{\n  resultReceived: {},\n  weirdness: 0,\n  error: null,\n  loading: false,\n  searchTerm: ''\n  }\n};\n\nconst giphyReducer = (state = initialState(), action) => {\n  switch (action.type) {\n    case 'ADD_LIKE':\n      return {\n        ...state,\n        totalLiked: action.payload\n      };\n    case 'REMOVE_LIKE':\n      return {\n        ...state,\n        totalLiked: action.payload\n      };\n    case 'REMOVE_ALL_LIKES':\n      return {\n        ...state,\n        totalLiked: action.payload\n      };\n    case 'REQUEST_GIF':\n      return {\n        ...state, \n        loading: true\n      }\n      case 'RECEIVE_GIF':\n      return {\n        ...state,\n        resultReceived: action.json,\n        loading: false\n      }\n      case 'INVALID_SEARCH':\n        return {\n          ...state,\n          error: action.payload,\n          loading: false\n        }\n    case 'UPDATE_WEIRDNESS_SCORE':\n      return {\n        ...state,\n        weirdness: action.payload\n      }\n    case 'FETCH_GIF':\n      return {\n        ...state,\n        resultReceived: action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nexport default giphyReducer;\n","import {\n  ADD_LIKE,\n  REMOVE_LIKE,\n  REMOVE_ALL_LIKES\n} from '../constants/actionTypes';\n\nconst initialState = () => {\n  return {\n    totalLiked: 0,\n    usersLikes: {}\n  };\n};\n\nconst likesReducer = (state = initialState(), action) => {\n  switch (action.type) {\n    case ADD_LIKE:\n      return {\n        ...state,\n        totalLiked: action.payload\n      };\n    case REMOVE_LIKE:\n      return {\n        ...state,\n        totalLiked: action.payload\n      };\n    case REMOVE_ALL_LIKES:\n      return {\n        ...state,\n        totalLiked: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default likesReducer;\n","export const ADD_LIKE = 'ADD_LIKE';\nexport const REMOVE_LIKE = 'REMOVE_LIKE';\nexport const REQUEST_GIF = 'REQUEST_GIF';\nexport const RECEIVE_GIF = 'RECEIVE_GIF';\nexport const UPDATE_WEIRDNESS_SCORE = 'UPDATE_WEIRDNESS_SCORE';\nexport const REMOVE_ALL_LIKES = 'REMOVE_ALL_LIKES';\nexport const INVALID_SEARCH = 'INVALID_SEARCH';\nexport const FETCH_GIF = 'FETCH_GIF';\n","import { combineReducers } from 'redux';\nimport giphyReducer from './giphyReducer';\nimport likesReducer from './likesReducer'\n\nconst reducers = combineReducers({\n  giphyReducer: giphyReducer,\n  likesReducer: likesReducer\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducers  from './reducers/combinedReducers.js';\n\n\n//the store, enhanced with thunk middleware to allow for async action in redux.\nconst store = createStore(\n\treducers,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n\n\nexport default store;","import * as types from '../constants/actionTypes.js';\nimport { API_KEY, USER_LIKES } from '../config/index.js';\n\n// ${USER_LIKES.weirdness}\n\nexport const fetchGif = searchTerm => {\n  console.log('SEARCH', searchTerm);\n  return (dispatch, getState) => {\n    console.log('getstate: ', getState());\n    if (getState().loading) {\n      return false;\n    }\n    dispatch(requestGif(searchTerm));\n\n    return fetch(\n      `http://api.giphy.com/v1/gifs/translate?s=${searchTerm}&weirdness=10&api_key=${API_KEY}`\n    )\n    .then(response => console.log(response))\n     // .then(response => response.json())\n      .then(json => dispatch(receiveGif(json.data)));\n  };\n};\n\nexport const requestGif = searchTerm => {\n  return { type: types.REQUEST_GIF, payload: searchTerm };\n};\n\nexport const receiveGif = json => {\n  if (!json) {\n    return {\n      type: types.INVALID_SEARCH,\n      payload: 'That is not a valid search'\n    };\n  }\n  return { type: types.RECEIVE_GIF, payload: json };\n};\n\nexport const addLike = totalLiked => {\n  const newTotalLiked = totalLiked + 1;\n  return { type: types.ADD_LIKE, payload: newTotalLiked };\n};\n\nexport const removeLike = totalLiked => {\n  return { type: types.REMOVE_LIKE, payload: (totalLiked -= 1) };\n};\n\nexport const removeAllLikes = () => {\n  return { type: types.REMOVE_ALL_LIKES, payload: 0 };\n};\n\nexport const updateWeirdnessScore = weirdness => {\n  return { type: types.UPDATE_WEIRDNESS_SCORE, payload: weirdness };\n};\n\nexport const invalidSearch = error => {\n  return { type: types.INVALID_SEARCH, payload: error };\n};\n","export const API_KEY = 'I2bfcu5IvRbRETTT4hTidiqxECuffcR7';\n\nexport const USER_LIKES = {\n  limit: 5,\n  weirdness: {\n    min: 0,\n    max: 10\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../action/actions';\n\nconst mapStateToProps = state => {\n  return {\n    totalLiked: state.giphyReducer.totalLiked,\n    weirdness: state.giphyReducer.weirdness,\n    resultReceived: state.giphyReducer.resultReceived,\n    usersLikes: state.giphyReducer.usersLikes,\n    error: state.giphyReducer.error,\n    loading: state.giphyReducer.loading,\n    searchTerm: state.giphyReducer.searchTerm\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators(\n    {\n      addLike: actions.addLike,\n      removeLike: actions.removeLike,\n      removeAllLikes: actions.removeAllLikes,\n      requestGif: actions.requestGif,\n      receiveGif: actions.receiveGif,\n      invalidSearch: actions.invalidSearch,\n      updateWeirdnessScore: actions.updateWeirdnessScore,\n      fetchGif: actions.fetchGif\n    },\n    dispatch\n  );\n};\n\nclass GiphsDisconnected extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: ''\n    };\n  }\n\n  handleTyping = event => {\n    const newSearchTerm = event.target.value;\n    this.setState({ searchTerm: newSearchTerm });\n  };\n\n  componentDidMount() {\n    console.log(this.state)\n  }\n\n  render() {\n    const {\n      totalLiked,\n      removeLike,\n      removeAllLikes,\n      addLike,\n      fetchGif,\n      searchTerm\n    } = this.props;\n    return (\n      <>\n        <form>\n          <input\n            value={this.state.searchTerm}\n            onChange={this.handleTyping}\n            type=\"text\"\n            placeholder=\"Search\"\n          ></input>\n          <button onClick={() => fetchGif(searchTerm)}>\n          <h5>{`the gif being fetched is: ${searchTerm}`}</h5>\n            Submit\n          </button>\n        </form>\n        <br />\n        <button onClick={() => addLike(totalLiked)}>Like</button>\n        <h6>{`Total Liked Is: ${totalLiked}`}</h6>\n        <button onClick={() => removeLike(totalLiked)}>Unlike</button>\n        <button onClick={() => removeAllLikes()}>Remove All Likes</button>\n      </>\n    );\n  }\n}\nexport const Giphs = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GiphsDisconnected);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/index.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store.js';\nimport { Giphs } from './ containers/Giphs';\n\nexport const App = () => (\n  <Provider store={store}>\n    <Giphs />\n  </Provider>\n);\n\n"],"sourceRoot":""}